# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32H7xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, make the necessary
# changes to the common.build_flags, common.lib_deps and common.lib_extra_dirs
# below.
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e nucleo_h743_reference
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e nucleo_h743_reference -t upload
#    # Clean up build related resources
#    pio run -t clean
#

[platformio]
include_dir = Inc
src_dir = Src

# Common build settings that apply to all environments, see my_machine.h for examples
[common]
build_flags =
  -I .
  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  -D OVERRIDE_MY_MACHINE
  # Increase buffer size
  -D BLOCK_BUFFER_SIZE=1024
  # Uncomment to enable debug builds
  -D DEBUG
  # Uncomment to enable support for keypad
  #-D KEYPAD_ENABLE=1
  # Uncomment to enable support for odometer
  #-D ODOMETER_ENABLE=1
  # Set to 1 or 2 (see Inc/my_machine.h)
  #-D VFD_ENABLE=1
  #-D SPINDLE_RPM_CONTROLLED
lib_deps =
  grbl
  #bluetooth
  #keypad
  #laser
  #motors
  #trinamic
  #odometer
  #spindle
lib_extra_dirs =
  .

# Build settings for SD card support, include in board environments as needed
[sdcard]
build_flags =
  -D SDCARD_ENABLE=1
  -I Middlewares/Third_Party/FatFs/src
  -I FATFS/Target
  -I FATFS/App
lib_deps =
  sdcard
  FATFS
  src
lib_extra_dirs =
  Middlewares/Third_Party/FatFs
  FATFS

# Build settings for USB serial support, include in board environments as needed
[usb]
build_flags =
  -D USB_SERIAL_CDC=1
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/Target
lib_deps =
  Core
  Class
  App
  Target
lib_extra_dirs =
  Middlewares/ST/STM32_USB_Device_Library
  USB_DEVICE

[env]
platform = ststm32
platform_packages = framework-stm32cubeh7
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off

# ST Nucleo H743ZI reference development board
# Note: Unable to build with ethernet support, as platformio package registry does not yet include framework-stm32cubeh7 v1.10,
#       which introduced the rewritten ST ethernet driver. This configuration file will be updated when available
[env:nucleo_h743_reference]
board = nucleo_h743zi
board_build.ldscript = STM32H743ZITX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_REFERENCE=
  -D NUCLEO_H743=
  -D HSE_VALUE=8000000
lib_deps = ${common.lib_deps}
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_H7xxZI drive
upload_protocol = stlink

# WeAct MiniSTM32H743 with USB serial and SD card support
[env:weact_mini_h743_generic]
board = weact_mini_h743vitx
board_build.ldscript = STM32H743ZITX_FLASH.ld
build_flags = ${common.build_flags}
              ${usb.build_flags}
              ${sdcard.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_WEACT_MINI_H743
  -D HSE_VALUE=25000000
lib_deps = ${common.lib_deps}
           ${usb.lib_deps}
           ${sdcard.lib_deps}
lib_extra_dirs = ${common.lib_extra_dirs}
                 ${usb.lib_extra_dirs}
                 ${sdcard.lib_extra_dirs}
upload_protocol = stlink
debug_tool = stlink

# WeAct MiniSTM32H743 with USB serial, SD card, and Trinamic 5160 driver support
[env:weact_mini_h743_tmc5160]
board = weact_mini_h743vitx
board_build.ldscript = STM32H743ZITX_FLASH.ld
build_flags = ${common.build_flags}
              ${usb.build_flags}
              ${sdcard.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_WEACT_MINI_H743
  -D HSE_VALUE=25000000
  -D TRINAMIC_ENABLE=5160
lib_deps = ${common.lib_deps}
           ${usb.lib_deps}
           ${sdcard.lib_deps}
           motors
           trinamic
lib_extra_dirs = ${common.lib_extra_dirs}
                 ${usb.lib_extra_dirs}
                 ${sdcard.lib_extra_dirs}
upload_protocol = stlink
debug_tool = stlink

# BTT SKR 3 with USB serial, SD card, and Trinamic 2209 driver support
[env:btt_skr_30_tmc2209]
board = btt_skr_30
board_build.ldscript = STM32H743ZITX_FLASH.ld
build_flags = ${common.build_flags}
              ${usb.build_flags}
              ${sdcard.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BTT_SKR_30
  -D HSE_VALUE=25000000
  -D TRINAMIC_ENABLE=2209
lib_deps = ${common.lib_deps}
           ${usb.lib_deps}
           ${sdcard.lib_deps}
           motors
           trinamic
lib_extra_dirs = ${common.lib_extra_dirs}
                 ${usb.lib_extra_dirs}
                 ${sdcard.lib_extra_dirs}
upload_protocol = dfu

# BTT SKR 3 with USB serial, SD card, and Trinamic 5160 driver support
[env:btt_skr_30_tmc5160]
board = btt_skr_30
board_build.ldscript = STM32H743ZITX_FLASH.ld
build_flags = ${common.build_flags}
              ${usb.build_flags}
              ${sdcard.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BTT_SKR_30
  -D HSE_VALUE=25000000
  -D TRINAMIC_ENABLE=5160
  -D TRINAMIC_SOFT_SPI
lib_deps = ${common.lib_deps}
           ${usb.lib_deps}
           ${sdcard.lib_deps}
           motors
           trinamic
lib_extra_dirs = ${common.lib_extra_dirs}
                 ${usb.lib_extra_dirs}
                 ${sdcard.lib_extra_dirs}
upload_protocol = dfu
